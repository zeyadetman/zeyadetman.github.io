{"componentChunkName":"component---src-templates-blogtemplate-js","path":"/blog/posts/Another-way-to-write-your-JavaScript/","result":{"data":{"markdownRemark":{"html":"<p>Hi all, in this post I'll share with you some frontend code, that we can write it in another way,\nAnd everything is working well, doesn't break the rules or putting smells in code, is cool.</p>\n<h2>1. Generate an array of sequential numbers <code class=\"language-text\">[1, 2, 3, ...., n]</code></h2>\n<p>If we want to generate an array like this <code class=\"language-text\">[1, 2, 3, 4, 5, 6, ...., n]</code>, We can write code using <code class=\"language-text\">new Array()</code> with\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill\"><code class=\"language-text\">Array.fill()</code></a> so it'll be</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">N</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> indx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> indx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></code></pre></div>\n<p><a href=\"https://docs.google.com/document/d/1FBxDuUJmUt_udO9ofJGXF4GAM2ZoiWI-PTEeq9Gbf1w/edit#heading=h.yf7gjfvrq7gx\"><em><strong>Why <code class=\"language-text\">new Array(N).map()</code> doesn't work?</strong></em></a></p>\n<p>Cool, But if we're working on a large array of sequential numbers, Is this method will be the best?\nMmmm, No! because <code class=\"language-text\">new Array()</code> creates <a href=\"https://v8.dev/blog/elements-kinds\">a holey array</a>\nwhich is slow compared to <a href=\"https://v8.dev/blog/elements-kinds\">packed arrays</a>. So we can avoid this and re-write this method\nusing <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\"><code class=\"language-text\">Array.from()</code></a>\nSo the code will be</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">N</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> length<span class=\"token operator\">:</span> <span class=\"token constant\">N</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> indx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> indx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></code></pre></div>\n<figure style=\"margin: 15px\">\n    <img src=\"https://i.imgur.com/UWkajiz.png\" width=\"700px\" alt=\"new array()\" />\n    <i><figcaption>source: <a href=\"https://slidr.io/mathiasbynens/v8-internals-for-javascript-developers#102\">\n    https://slidrio-decks.global.ssl.fastly.net/1259/original.pdf?1521622174</a> <br />slide: 102</figcaption></i>\n</figure>\n<p>you can check the holey array in your Chrome Console, so if we write this <code class=\"language-text\">new Array(10)</code> your console will display\n<code class=\"language-text\">[empty Ã— 10]</code> which is an array of empty values.</p>\n<p>More Resources:</p>\n<ol>\n<li><a href=\"https://v8.dev/blog/elements-kinds\">https://v8.dev/blog/elements-kinds</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3746725/how-to-create-an-array-containing-1-n\">https://stackoverflow.com/questions/3746725/how-to-create-an-array-containing-1-n</a></li>\n</ol>\n<h2>2. Number formatting</h2>\n<p>Sometimes you want to write a money with specific currency <code class=\"language-text\">EGP 1000</code> or a size of something <code class=\"language-text\">50 kB</code> one of the ways to write it,\nsimply <code class=\"language-text\">const money = &#39;1000 EGP&#39;</code>. But there's a nicer way to write formatted numbers using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\"><code class=\"language-text\">Intl.NumberFormat</code></a>. So this strings will be</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> money <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intl<span class=\"token punctuation\">.</span>NumberFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"en\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  style<span class=\"token operator\">:</span> <span class=\"token string\">\"currency\"</span><span class=\"token punctuation\">,</span>\n  currency<span class=\"token operator\">:</span> <span class=\"token string\">\"EGP\"</span><span class=\"token punctuation\">,</span>\n  useGrouping<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  maximumSignificantDigits<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"EGP 1000\"</span>\n\n<span class=\"token keyword\">const</span> storage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intl<span class=\"token punctuation\">.</span>NumberFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"en\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  style<span class=\"token operator\">:</span> <span class=\"token string\">\"unit\"</span><span class=\"token punctuation\">,</span>\n  unit<span class=\"token operator\">:</span> <span class=\"token string\">\"kilobyte\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"50 kB\"</span></code></pre></div>\n<p><em>Note: style <code class=\"language-text\">units</code> works on chrome 77+, so you can use babel to compile it.</em> <br />\nThis is so cool, if you're working on multiple locale and want to switch between them in a better and fully customized way.\nMore info from <a href=\"https://v8.dev/features/intl-numberformat\">V8 Blog: Intl.NumberFormat</a></p>\n<h2>3. Styling NonInteracitve elements on focus</h2>\n<p>You can't do this using css/html without <code class=\"language-text\">tabindex</code> and according to <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex#Accessibility_concerns\">MDN</a>:</p>\n<blockquote>\n<p>Avoid using the <code class=\"language-text\">tabindex</code> attribute in conjunction with non-interactive content to make something intended to be interactive focusable by keyboard input. An example of this would be using an <code class=\"language-text\">&lt;div&gt;</code> element to describe a button, instead of the <code class=\"language-text\">&lt;button&gt;</code> element.</p>\n</blockquote>\n<p><a href=\"https://www.w3.org/TR/html401/interact/forms.html#adef-tabindex\">and w3 says:</a></p>\n<blockquote>\n<p>The content should be semantically described using interactive elements (<code class=\"language-text\">&lt;a&gt;</code>, <code class=\"language-text\">&lt;button&gt;</code>, <code class=\"language-text\">&lt;details&gt;</code>, <code class=\"language-text\">&lt;input&gt;</code>, <code class=\"language-text\">&lt;select&gt;</code>, <code class=\"language-text\">&lt;textarea&gt;</code>, etc.) instead.</p>\n</blockquote>\n<p>So the best practice for this is using <code class=\"language-text\">addEventListener()</code> in <code class=\"language-text\">JavaScript</code>, But if you want to use <code class=\"language-text\">tabindex</code> don't forget to add <code class=\"language-text\">tabindex</code> to inner html content.</p>\n<h3>Another solution</h3>\n<p>You don't have to use <code class=\"language-text\">tabindex</code> if you just want to change the <code class=\"language-text\">div</code> border.\nyou can use <code class=\"language-text\">:focus-within</code> and just change the border.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.search-box</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> 1%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid #fc3<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.search-input</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.search-input:focus</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.search-box:focus-within</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 2px solid #53c9fc<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>search-box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Row</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>search-box-icon<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>search-input<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>search in listbox<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Row</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><a href=\"https://stackoverflow.com/a/55087153/5721245\"><em>I published this as an answer on stackoverflow</em></a></p>\n<p>Finally, I believe that everyone of us has a style writing code, his favorite practices that they don't break the rules,\nor putting smells in code.</p>","fields":{"slug":"/blog/posts/Another-way-to-write-your-JavaScript/"},"frontmatter":{"date":"September 09, 2019","title":"Another way to write your JavaScript","toArabic":null},"timeToRead":4,"wordCount":{"words":382}}},"pageContext":{"slug":"/blog/posts/Another-way-to-write-your-JavaScript/","toArabic":null}}}