{"componentChunkName":"component---src-templates-blogtemplate-js","path":"/blog/posts/Apply-condition-on-specific-nested-child-elements-in-ReactJS/","result":{"data":{"markdownRemark":{"html":"<h1>Apply condition on specific nested child elements in ReactJS</h1>\n<h2>Intro</h2>\n<p>We have a reactjs app, this app contains a container component called <code class=\"language-text\">App</code> inside it, we have multiple nested components some of them contains <code class=\"language-text\">button</code> elements. What we want to do is disable all child <code class=\"language-text\">button</code>s programmatically without using styles way when I toggle a <code class=\"language-text\">switch</code> button in the container component <code class=\"language-text\">App</code>.</p>\n<h2>Naïve Solution</h2>\n<p>The naïve solution to this problem is simple create a new state to store the value of the <code class=\"language-text\">switch</code> button, then iterate manually over each child components and searching for <code class=\"language-text\">button</code>, if you find a button pass the <code class=\"language-text\">switch</code> button state value to the component to update the button behavior whenever the <code class=\"language-text\">switch</code> changes <code class=\"language-text\">&lt;Button {...(isDisable ? { disabled: true } : {})} /&gt;</code>.</p>\n<p>If we have 10 nested buttons for example, it'll be hassle to iterate over them, also we may add more buttons or change the condition.  </p>\n<p>take a look of the <code class=\"language-text\">Tab 1 Panel 1</code> button here: <a href=\"https://github.com/zeyadetman/action-on-specific-child-elements/tree/naive-solution\">https://github.com/zeyadetman/action-on-specific-child-elements/tree/naive-solution</a></p>\n<h2>Another Solution</h2>\n<p>Here's another solution to do, using <code class=\"language-text\">useRef</code> to get a reference to the component <code class=\"language-text\">App</code> then get all buttons inside it here's a code for this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> appRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// here we got all rendered buttons inside the component</span>\n  <span class=\"token keyword\">const</span> appButtons <span class=\"token operator\">=</span> appRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> btn <span class=\"token keyword\">of</span> appButtons<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isEnabled<span class=\"token punctuation\">)</span> btn<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isEnabled<span class=\"token punctuation\">)</span> btn<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>isDisable<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>appRef<span class=\"token punctuation\">}</span><span class=\"token operator\">></span> </code></pre></div>\n<p>In previous <code class=\"language-text\">useEffect</code> we got rendered buttons only not them all, and whenever a change happens the <code class=\"language-text\">useEffect</code> won't listen to it.</p>\n<h3>Hack it</h3>\n<p>We've to check if there's change in DOM, then call the body of the <code class=\"language-text\">useEffect</code> again, So we'll create two states to handle the tabs and subTabs changes, they're only elements to change the DOM, then pass their values to the dependancy array of the <code class=\"language-text\">useEffect</code> to listen the changes:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>tabSelected<span class=\"token punctuation\">,</span> selectTab<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>subTabSelected<span class=\"token punctuation\">,</span> selectSubTab<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">.</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// here we got all rendered buttons inside the component</span>\n  <span class=\"token keyword\">const</span> appButtons <span class=\"token operator\">=</span> appRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> btn <span class=\"token keyword\">of</span> appButtons<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isEnabled<span class=\"token punctuation\">)</span> btn<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isEnabled<span class=\"token punctuation\">)</span> btn<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>tabSelected<span class=\"token punctuation\">,</span> subTabSelected<span class=\"token punctuation\">,</span> isDisable<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Conclusion and corner cases</h2>\n<p>I think this solution is fit only when you have multiple nested element and you want to apply condition on them all without iterating over them manually.</p>\n<h3>Corner cases</h3>\n<ul>\n<li>If you want to exclude <code class=\"language-text\">button</code> from our previous app, you can add a class to it then check for it in the <code class=\"language-text\">useEffect</code> function.</li>\n<li>If the component will re-render and get back to its initial state, then you have to return a function in the <code class=\"language-text\">useEffect</code> to undo whatever you did in the <code class=\"language-text\">useEffect</code> body it's <code class=\"language-text\">componentWillUnmount</code> in React Lifecycle.</li>\n</ul>\n<p>Here's the final commit to the app <a href=\"https://github.com/zeyadetman/action-on-specific-child-elements/tree/final-commit\">https://github.com/zeyadetman/action-on-specific-child-elements/tree/final-commit</a></p>","fields":{"slug":"/blog/posts/Apply-condition-on-specific-nested-child-elements-in-ReactJS/"},"frontmatter":{"date":"February 13, 2020","title":"Apply condition on specific nested child elements in ReactJS","toArabic":null},"timeToRead":2,"wordCount":{"words":346}}},"pageContext":{"slug":"/blog/posts/Apply-condition-on-specific-nested-child-elements-in-ReactJS/","toArabic":null}}}