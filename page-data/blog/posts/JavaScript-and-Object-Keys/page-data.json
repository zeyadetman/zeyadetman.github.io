{"componentChunkName":"component---src-templates-blogtemplate-js","path":"/blog/posts/JavaScript-and-Object-Keys/","result":{"data":{"markdownRemark":{"html":"<p>Hello ðŸ‘‹ In this post we will try to use objects in a different wrong way ðŸ˜ƒ by implement a frequency array in javascript.\nBut before we dive into this, We will discover what's the frequency array?</p>\n<h2>Frequency Array on a sorted array</h2>\n<p>For example, If you have an array like this <code class=\"language-text\">const arr = [1,2,2,3,3,4];</code> and you want to count occurrences of each element, then you can iterate over the values and store them as keys of object and its value increasing according to the number of occurrences in the remainig array. And this is called a frequency array. The code below go through what I'm saying (Please Don't do this again):</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span> result<span class=\"token punctuation\">)</span> result<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> result<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {1: 1, 2: 2, 3: 2, 4: 1}</span></code></pre></div>\n<p>Wow! that's cool and Right! But No. That's wrong! Why??\nYou're write this code and seems that works well, but try to add <code class=\"language-text\">-1</code> to the first of your array, then you'll discover that the final result is <code class=\"language-text\">{1: 1, 2: 2, 3: 2, 4: 1, -1: 1}</code>, Wait... But Why? You're wondering why the <code class=\"language-text\">-1</code> is in the end of the result object and you know the object in javascript sorting the keys by default. (Ummm not exactly!)\nObjects' Keys in Javascript are <code class=\"language-text\">strings</code> and <code class=\"language-text\">symbols</code> only, you can't use any primitive values as keys except <code class=\"language-text\">strings</code> and <code class=\"language-text\">symbols</code> So the keys in your result aren't <code class=\"language-text\">numbers</code>, they're parsed to <code class=\"language-text\">strings</code> before storing as keys in object, but <code class=\"language-text\">&quot;-1&quot; &lt; &quot;1&quot; === true</code> so still why <code class=\"language-text\">-1</code> moved to the end?!</p>\n<p><em>Note: <code class=\"language-text\">Symbol</code> Can be a key for objects, but it doesn't work like <code class=\"language-text\">strings</code>. <a href=\"https://2ality.com/2014/12/es6-symbols.html\">Read more...</a></em></p>\n<h2>How Javascript objects order their keys?</h2>\n<p>Keys in Javascript objects are three types, +integer-like (0,1,2,3), strings, and symbols. And the order goes:</p>\n<ol>\n<li>+Integer-like in ascending order. <code class=\"language-text\">-1</code> like our previous example or negatives in general aren't valid as an index, there's no <code class=\"language-text\">-1</code> index, So they're ordered as <code class=\"language-text\">strings</code>.</li>\n<li>Strings in order of created, without any sort or comparison.</li>\n<li>Symbols in order of created, without any sort or comparison.</li>\n</ol>\n<p>Okay, So in our previous example, we figured out what happens while getting the result, Right?\nBut what if we want to get the right order?</p>\n<h2>new Map()</h2>\n<p>To achieve our frequency array respecting keys insertion order we can use <code class=\"language-text\">new Map()</code> which allows keys to be anytype, so the code for this will be like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">else</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Map(5) {-1 => 1, 1 => 1, 2 => 2, 3 => 2, 4 => 1}</span></code></pre></div>\n<p>Then we can iterate over it using <code class=\"language-text\">forEach</code> method.</p>\n<h2>Resources</h2>\n<ul>\n<li><a href=\"https://2ality.com/2014/12/es6-symbols.html\">Symbols in ECMAScript 6</a></li>\n<li><a href=\"https://exploringjs.com/es6/ch_oop-besides-classes.html#_traversal-order-of-properties\">14.4.2 Traversal order of properties</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li>\n</ul>","fields":{"slug":"/blog/posts/JavaScript-and-Object-Keys/"},"frontmatter":{"date":"January 06, 2020","title":"JavaScript and Object Keys","toArabic":null},"timeToRead":3,"wordCount":{"words":375}}},"pageContext":{"slug":"/blog/posts/JavaScript-and-Object-Keys/","toArabic":null}}}